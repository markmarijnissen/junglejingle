{"version":3,"file":"public/js/app.js","sources":["app/app.coffee"],"names":[],"mappings":"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","sourcesContent":["'use strict'\n\n# define Jungle Jingle App module\nangular\n.module('JungleJingleApp',[\n  'firebase'              # firebase for sync\n  'hmTouchEvents'         # hammer touch events\n  #'LocalStorageModule'   # local storage\n  #'ngSanitize'           # sanitize\n])\n# howler & jQuery are also included\n\n# config app\n.config([\n  '$locationProvider',\n  ($locationProvider) ->\n    $locationProvider.html5Mode(true).hashPrefix('');\n])\n\n# define firebase base URL\n.value('firebaseUrl','http://madebymark.firebaseio.com/junglejingle/')\n\n# factory to generate game code\n.factory('generateCode',[ \n  '$location',\n  ($location) -> ->\n    vowels = \"aeuio\"\n    consonants = \"bcdfghklmnprstvxz\"\n    pick = (letters) -> letters[Math.floor(Math.random() * letters.length)]\n    pick(vowels)+pick(consonants)+pick(vowels)+pick(consonants)+pick(vowels)\n])\n\n# unique ID to count number of players in a game\n.factory('playerId', -> Math.random().toString(36).substring(2);)\n\n# main app controller; responsible for maintaining connection and home screens\n.controller('AppCtrl',[\n  '$scope','$location','$q','firebaseUrl','playerId','generateCode','angularFire',\n  ($scope,  $location,  $q , firebaseUrl,  playerId,  generateCode,  angularFire) ->\n    \n    # set the code\n    $scope.code = code = do ->\n      # retrieve from path\n      code = $location.path().substr(1)\n      #.... or generate a new one\n      if not code\n        code = generateCode()\n        $location.path(code).replace() # and update location\n      code\n\n    # if this game is already occupied\n    $scope.newCode = generateCode()\n    # use this URL to let a friend join\n    $scope.url = $location.absUrl();\n\n    # connect to firebase to retrieve playerA/B status    \n    $scope.connection = -> \"loading\"  \n    $scope.me = \"loading\"\n    do ->\n      # create playerA and playerB firebase\n      aRef = new Firebase(firebaseUrl+code+\"/a\")\n      bRef = new Firebase(firebaseUrl+code+\"/b\")\n      # link them to the scope\n      aBind = angularFire(aRef,$scope,'playera','loading')\n      bBind = angularFire(bRef,$scope,'playerb','loading')\n      # when they are loaded, update the \"connection\" function\n      $q.all([aBind,bBind]).then -> \n        $scope.connection = ->\n            a = $scope.playera\n            b = $scope.playerb\n            # if you're in the game, either play or wait\n            if playerId in [a,b]\n              if a and b then \"playing\" else \"waiting\"\n            # if you're not in the game, try to join as 'a'\n            else if not a\n              $scope.me = 'a'\n              $scope.playera = playerId \n              aRef.onDisconnect().remove() # free spot on disconnect\n              if b then \"playing\" else \"waiting\"\n            # if you're not in the game, try to join as 'b'\n            else if not b\n              $scope.me = 'b'\n              $scope.playerb = playerId\n              bRef.onDisconnect().remove()\n              if a then \"playing\" else \"waiting\"\n            # both places are occupied, you're waiting for a spot\n            else\n              \"watching\"\n\n])\n\n.factory('isWinner',[\n  -> \n    # hashmap that defines \"winners\" as true;\n    # losers are undefined.\n    xWinsFromY = \n      'elephant':\n        'lion': true\n        'snake': true\n      'lion':\n        'snake': true\n        'mouse': true\n      'snake':\n        'mouse':true\n        'fence':true\n      'mouse':\n        'fence':true\n        'elephant':true    \n      'fence':\n        'elephant':true\n        'lion':true\n    (myMove,opponentMove) -> \n      xWinsFromY[myMove][opponentMove]? or myMove is opponentMove or not opponentMove\n])\n\n# game controller; responsible for in-game dynamics\n.controller('GameCtrl',[\n  '$scope','isWinner','firebaseUrl','angularFire',\n  ($scope,  isWinner,  firebaseUrl,  angularFire) ->\n\n    # animals\n    $scope.animals = ['elephant','lion','snake','mouse','fence'];\n\n    # inherit 'me' and 'code' from the parent 'App' scope\n    $scope.me = me = $scope.$parent.me\n    $scope.other = other = {'a':'b','b':'a'}[me];\n    code = $scope.$parent.code\n\n    # firebase keeps track of a chain of moves;\n    # player A has all 'even' moves (0,2,4,..)\n    # player B haas all 'uneven' moves (1,3,5,..)\n    $scope.moves = []\n    moveBind = angularFire(new Firebase(firebaseUrl+code+'/moves'),$scope,'moves',[])\n    moveBind.then ->\n      # if firebase sets 'moves' to null (doesn't exist), initialize!\n      if not $scope.moves?.length then $scope.moves = []\n\n    #firebase keeps track of score\n    $scope.myScore = 0\n    angularFire(new Firebase(firebaseUrl+code+\"/score/\"+me),$scope,'myScore',0)\n    $scope.opponentScore = 0;\n    angularFire(new Firebase(firebaseUrl+code+\"/score/\"+other),$scope,'opponentScore',0)\n\n    # make move\n    $scope.selectMove = (myMove) -> \n      if $scope.isMyTurn()  \n        # add move to Firebase\n        $scope.moves.push(myMove)\n        opponentMove = $scope.getOpponentMove()\n        if not opponentMove\n          # first move\n        else if myMove is opponentMove\n          # same; they fall in love\n        else if not isWinner(myMove,opponentMove) \n          lose()\n\n    lose = ->\n      $scope.opponentScore++\n      # buzz  \n\n    # get move from opponent\n    # if my turn; it's last move (a wild .... appears)\n    # if NOT my turn; it's second last move (a wild ... appears)\n    $scope.getOpponentMove = ->\n      len = $scope.moves?.length or 0\n      # if my turn, I haven't moved, so other move is last\n      if $scope.isMyTurn() and len > 0 \n        $scope.moves[len-1]\n      # if NOT my turn, then I have moved, so other move is second last\n      else if len >= 2 \n        $scope.moves[len-2]\n\n    # get my move; \n    # if my turn; it's blank (i have to choose)\n    # if NOT my turn; then it's on screen (as response)\n    $scope.getMyMove = ->\n      if not $scope.isMyTurn() then $scope.moves[$scope.moves.length-1]\n\n    # helper method\n    $scope.isMyTurn = ->\n      len = $scope.moves.length or 0\n      if me is 'a'\n        len % 2 == 0\n      else if me is 'b'\n        len % 2 == 1\n      else\n        false # game is initalizing...\n\n])\n\n.run([\n  '$rootScope',\n  ($rootScope) ->\n    $rootScope.safeApply = (fn) -> \n      phase = this.$root.$$phase\n      if(phase == '$apply' || phase == '$digest') \n        if(fn && (typeof(fn) == 'function')) \n          fn()\n      else \n        @$apply(fn)\n])\n\n"]}